// Service de commandes utilisant UNIQUEMENT l'API
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.birkshoes.store/api';

console.log('üîß Service de commandes API initialis√©');

const orderService = {
  async createOrder(orderData) {
    console.log('üì° API Orders - Cr√©ation de commande:', orderData);
    
    try {
      const response = await fetch(`${API_BASE_URL}/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur de cr√©ation de commande');
      }

      const data = await response.json();
      console.log('‚úÖ API Orders - Commande cr√©√©e:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Orders - Erreur de cr√©ation:', error);
      throw error;
    }
  },

  async getUserOrders(userId) {
    console.log('üì° API Orders - R√©cup√©ration des commandes pour:', userId);
    
    try {
      const response = await fetch(`${API_BASE_URL}/orders/user/${userId}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur de r√©cup√©ration des commandes');
      }

      const data = await response.json();
      console.log('‚úÖ API Orders - Commandes r√©cup√©r√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Orders - Erreur de r√©cup√©ration:', error);
      throw error;
    }
  },

  async getOrderById(orderId) {
    console.log('üì° API Orders - R√©cup√©ration de la commande:', orderId);
    
    try {
      const response = await fetch(`${API_BASE_URL}/orders/${orderId}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur de r√©cup√©ration de la commande');
      }

      const data = await response.json();
      console.log('‚úÖ API Orders - Commande r√©cup√©r√©e:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Orders - Erreur de r√©cup√©ration:', error);
      throw error;
    }
  }
};

export { orderService as OrderService };
export const createOrder = orderService.createOrder;
export default orderService;
