/**
 * üè† HOME SERVICE CLIENT
 * Service pour r√©cup√©rer le contenu de la page d'accueil c√¥t√© client
 */

const API_BASE_URL = process.env.REACT_APP_ADMIN_API_URL || 'http://localhost:4000';

/**
 * R√©cup√©rer toutes les sections de la page d'accueil
 * @returns {Promise<Array>} Sections de la page d'accueil
 */
export const getHomeSections = async () => {
  console.log('üîÑ [HOME-SERVICE] R√©cup√©ration des sections...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/content/home-sections`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      cache: 'no-cache' // Toujours r√©cup√©rer les donn√©es fra√Æches
    });
    
    console.log('üìä [HOME-SERVICE] R√©ponse re√ßue, status:', response.status);
    
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status} - ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('üìù [HOME-SERVICE] Donn√©es re√ßues:', data);
    
    if (data.success) {
      console.log('‚úÖ [HOME-SERVICE] Sections r√©cup√©r√©es avec succ√®s:', data.data?.length || 0);
      return data.data || [];
    } else {
      console.error('‚ùå [HOME-SERVICE] Erreur API:', data.message);
      return [];
    }
  } catch (error) {
    console.error('‚ùå [HOME-SERVICE] Erreur r√©seau:', error);
    return [];
  }
};

/**
 * R√©cup√©rer une section sp√©cifique par ID
 * @param {string} id - ID de la section
 * @returns {Promise<Object|null>} Section ou null
 */
export const getHomeSection = async (id) => {
  console.log('üîç [HOME-SERVICE] R√©cup√©ration de la section:', id);
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/content/home-sections/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
      console.log('‚úÖ [HOME-SERVICE] Section r√©cup√©r√©e:', data.data?.title || id);
      return data.data;
    } else {
      console.error('‚ùå [HOME-SERVICE] Erreur API:', data.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå [HOME-SERVICE] Erreur r√©seau:', error);
    return null;
  }
};

/**
 * V√©rifier si des sections existent en base de donn√©es
 * @returns {Promise<boolean>} True si des sections existent
 */
export const checkHomeSectionsExist = async () => {
  try {
    const sections = await getHomeSections();
    return sections && sections.length > 0;
  } catch (error) {
    console.error('‚ùå [HOME-SERVICE] Erreur lors de la v√©rification:', error);
    return false;
  }
};

export default {
  getHomeSections,
  getHomeSection,
  checkHomeSectionsExist
};
