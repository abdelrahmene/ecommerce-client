import { useState, useEffect } from 'react';
import { getHomeSections } from '../services/homeService';

/**
 * Hook personnalis√© pour r√©cup√©rer les sections de la page d'accueil
 * üîÑ Connect√© √† l'API Backend avec fallback automatique
 */
export const useHomeSections = () => {
  const [sections, setSections] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isFromFallback, setIsFromFallback] = useState(false);

  useEffect(() => {
    const fetchSections = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('üîÑ Hook: R√©cup√©ration des sections de la page d\'accueil...');
        
        const fetchedSections = await getHomeSections();
        
        console.log('üîÑ Hook: Sections r√©cup√©r√©es:', fetchedSections.length);
        console.log('üîç Hook: D√©tail des sections:', fetchedSections);
        
        // V√©rifier si c'est du fallback en regardant l'ID de la premi√®re section
        const fromFallback = fetchedSections.length > 0 && fetchedSections[0].id === 'hero';
        setIsFromFallback(fromFallback);
        
        if (fromFallback) {
          console.log('üìã Hook: Utilisation des donn√©es de fallback');
        } else {
          console.log('‚úÖ Hook: Utilisation des donn√©es de l\'API');
        }
        
        setSections(fetchedSections);
        setError(null); // Pas d'erreur puisqu'on a des donn√©es
      } catch (err) {
        // Cette erreur ne devrait plus jamais se produire avec le fallback
        console.error('‚ùå Hook: Erreur inattendue:', err);
        setError('Erreur inattendue lors du chargement');
        setSections([]);
      } finally {
        setLoading(false);
      }
    };

    fetchSections();
  }, []);

  // Fonction pour recharger les donn√©es
  const refetch = async () => {
    const fetchSections = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('üîÑ Hook: Rechargement des sections...');
        
        const fetchedSections = await getHomeSections();
        
        console.log('üîÑ Hook: Sections recharg√©es:', fetchedSections.length);
        console.log('üîç Hook: D√©tail sections recharg√©es:', fetchedSections);
        
        const fromFallback = fetchedSections.length > 0 && fetchedSections[0].id === 'hero';
        setIsFromFallback(fromFallback);
        
        setSections(fetchedSections);
        setError(null);
      } catch (err) {
        console.error('‚ùå Hook: Erreur lors du rechargement:', err);
        setError('Erreur lors du rechargement');
        setSections([]);
      } finally {
        setLoading(false);
      }
    };
    
    await fetchSections();
  };

  return { 
    sections, 
    loading, 
    error, 
    refetch,
    isFromFallback
  };
};

export default useHomeSections;
