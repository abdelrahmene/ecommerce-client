import React, { useState, useEffect } from 'react';
import { Link, useParams, useLocation } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { User, Package, Heart, LogOut, ArrowLeft, Truck, MapPin, Clock, CheckCircle, XCircle, CreditCard } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { doc, getDoc } from 'firebase/firestore';
import { firestore } from '../../services/firebase/firebase';
import toast from 'react-hot-toast';

const OrderDetailPage = () => {
  const { id } = useParams();
  const location = useLocation();
  const { currentUser, logout } = useAuth();
  
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Check if there's a success message from checkout
  useEffect(() => {
    if (location.state?.success) {
      toast.success(location.state.message || 'Order placed successfully!');
    }
  }, [location]);
  
  useEffect(() => {
    const fetchOrder = async () => {
      try {
        setLoading(true);
        
        const orderDoc = await getDoc(doc(firestore, 'orders', id));
        
        if (!orderDoc.exists()) {
          setError('Order not found');
          setLoading(false);
          return;
        }
        
        const orderData = {
          id: orderDoc.id,
          ...orderDoc.data(),
          createdAt: orderDoc.data().createdAt?.toDate?.() || new Date()
        };
        
        // Verify that the order belongs to the current user
        if (orderData.userId !== currentUser.uid) {
          setError('You do not have permission to view this order');
          setLoading(false);
          return;
        }
        
        setOrder(orderData);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching order:', err);
        setError('Failed to load order details');
        setLoading(false);
      }
    };
    
    if (currentUser && id) {
      fetchOrder();
    }
  }, [currentUser, id]);
  
  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };
  
  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'shipped':
        return 'bg-purple-100 text-purple-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      case 'pending':
      default:
        return 'bg-yellow-100 text-yellow-800';
    }
  };
  
  const getStatusIcon = (status) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return <CheckCircle size={18} className="text-green-500" />;
      case 'processing':
        return <Clock size={18} className="text-blue-500" />;
      case 'shipped':
        return <Truck size={18} className="text-purple-500" />;
      case 'cancelled':
        return <XCircle size={18} className="text-red-500" />;
      case 'pending':
      default:
        return <Clock size={18} className="text-yellow-500" />;
    }
  };
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.4
      }
    }
  };

  return (
    <>
      <Helmet>
        <title>Order Details | Your Ecommerce Store</title>
        <meta name="description" content="View your order details" />
      </Helmet>
      
      <div className="container mx-auto px-4 py-12">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <div className="flex items-center mb-4">
            <Link
              to="/account/orders"
              className="flex items-center text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
            >
              <ArrowLeft size={18} className="mr-2" />
              Back to Orders
            </Link>
          </div>
          
          <h1 className="text-3xl font-bold flex items-center">
            <Package className="mr-3" size={32} />
            Order Details
          </h1>
        </motion.div>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Sidebar navigation */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="lg:col-span-1"
          >
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center">
                  <div className="w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center text-primary-600 dark:text-primary-300">
                    {currentUser?.email?.charAt(0) || 'U'}
                  </div>
                  <div className="ml-4">
                    <h2 className="font-semibold">
                      {currentUser?.displayName || 'User'}
                    </h2>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{currentUser?.email}</p>
                  </div>
                </div>
              </div>
              
              <nav className="p-2">
                <Link
                  to="/account"
                  className="flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg"
                >
                  <User size={18} className="mr-3" />
                  Profile
                </Link>
                
                <Link
                  to="/account/orders"
                  className="flex items-center px-4 py-3 text-primary-600 bg-primary-50 dark:bg-primary-900/20 dark:text-primary-300 rounded-lg mt-1"
                >
                  <Package size={18} className="mr-3" />
                  Orders
                </Link>
                
                <Link
                  to="/wishlist"
                  className="flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg mt-1"
                >
                  <Heart size={18} className="mr-3" />
                  Wishlist
                </Link>
                
                <button
                  onClick={handleLogout}
                  className="w-full flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg mt-1"
                >
                  <LogOut size={18} className="mr-3" />
                  Logout
                </button>
              </nav>
            </div>
          </motion.div>
          
          {/* Main content */}
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="lg:col-span-3"
          >
            {loading ? (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 flex justify-center py-12">
                <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-primary-500"></div>
              </div>
            ) : error ? (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center py-12">
                <p className="text-red-500 mb-4">{error}</p>
                <Link
                  to="/account/orders"
                  className="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition-colors inline-flex items-center"
                >
                  <ArrowLeft size={16} className="mr-2" />
                  Back to Orders
                </Link>
              </div>
            ) : order ? (
              <>
                {/* Order summary */}
                <motion.div
                  variants={itemVariants}
                  className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8"
                >
                  <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                    <div>
                      <h2 className="text-xl font-semibold">Order #{order.id.slice(0, 8)}</h2>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Placed on {order.createdAt.toLocaleDateString()} at {order.createdAt.toLocaleTimeString()}
                      </p>
                    </div>
                    
                    <div className="mt-4 md:mt-0 flex items-center">
                      {getStatusIcon(order.status)}
                      <span className={`ml-2 px-3 py-1 text-sm font-medium rounded-full ${getStatusColor(order.status)}`}>
                        {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                      </span>
                    </div>
                  </div>
                  
                  <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      {/* Shipping info */}
                      <div>
                        <div className="flex items-center mb-4">
                          <MapPin size={18} className="text-primary-500 mr-2" />
                          <h3 className="font-medium">Shipping Address</h3>
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          <p className="font-medium">{order.shipping?.firstName} {order.shipping?.lastName}</p>
                          <p>{order.shipping?.address}</p>
                          <p>{order.shipping?.city}, {order.shipping?.state} {order.shipping?.zipCode}</p>
                          <p>{order.shipping?.country}</p>
                          <p className="mt-2">{order.shipping?.phone}</p>
                          <p>{order.shipping?.email}</p>
                        </div>
                      </div>
                      
                      {/* Shipping method */}
                      <div>
                        <div className="flex items-center mb-4">
                          <Truck size={18} className="text-primary-500 mr-2" />
                          <h3 className="font-medium">Shipping Method</h3>
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          <p>
                            {order.shipping?.method === 'express' 
                              ? 'Express Shipping (1-2 business days)' 
                              : 'Standard Shipping (3-5 business days)'}
                          </p>
                        </div>
                      </div>
                      
                      {/* Payment info */}
                      <div>
                        <div className="flex items-center mb-4">
                          <CreditCard size={18} className="text-primary-500 mr-2" />
                          <h3 className="font-medium">Payment Information</h3>
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          <p>Payment Method: Credit Card</p>
                          {order.payment?.cardLast4 && (
                            <p>Card ending in {order.payment.cardLast4}</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
                
                {/* Order items */}
                <motion.div
                  variants={itemVariants}
                  className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8"
                >
                  <h2 className="text-xl font-semibold mb-6">Order Items</h2>
                  
                  <div className="divide-y divide-gray-200 dark:divide-gray-700">
                    {order.items?.map((item, index) => (
                      <div key={index} className="py-4 flex">
                        <div className="flex-shrink-0 w-20 h-20">
                          {item.image ? (
                            <img
                              src={item.image}
                              alt={item.name}
                              className="w-full h-full object-cover rounded-md"
                            />
                          ) : (
                            <div className="w-full h-full bg-gray-200 dark:bg-gray-700 rounded-md flex items-center justify-center">
                              <Package size={24} className="text-gray-400" />
                            </div>
                          )}
                        </div>
                        <div className="ml-4 flex-1">
                          <div className="flex justify-between">
                            <div>
                              <h3 className="font-medium">{item.name}</h3>
                              
                              {/* Product options */}
                              {item.options && Object.keys(item.options).length > 0 && (
                                <div className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                                  {Object.entries(item.options).map(([key, value]) => (
                                    <span key={key} className="mr-4">
                                      <span className="font-medium">{key}:</span> {value}
                                    </span>
                                  ))}
                                </div>
                              )}
                              
                              <div className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                                Quantity: {item.quantity}
                              </div>
                            </div>
                            
                            <div className="text-right">
                              <div className="font-medium">${(item.price * item.quantity).toFixed(2)}</div>
                              <div className="text-sm text-gray-600 dark:text-gray-400">
                                ${item.price.toFixed(2)} each
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </motion.div>
                
                {/* Order summary */}
                <motion.div
                  variants={itemVariants}
                  className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6"
                >
                  <h2 className="text-xl font-semibold mb-6">Order Summary</h2>
                  
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">Subtotal</span>
                      <span className="font-medium">${order.subtotal?.toFixed(2) || '0.00'}</span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">Shipping</span>
                      <span className="font-medium">${order.shipping?.cost?.toFixed(2) || '0.00'}</span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">Tax</span>
                      <span className="font-medium">${order.tax?.toFixed(2) || '0.00'}</span>
                    </div>
                    
                    {order.discount > 0 && (
                      <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Discount</span>
                        <span className="font-medium text-green-600">-${order.discount.toFixed(2)}</span>
                      </div>
                    )}
                    
                    <div className="border-t border-gray-200 dark:border-gray-700 pt-4 flex justify-between font-semibold text-lg">
                      <span>Total</span>
                      <span>${order.total?.toFixed(2) || '0.00'}</span>
                    </div>
                  </div>
                  
                  {order.notes && (
                    <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                      <h3 className="font-medium mb-2">Order Notes</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{order.notes}</p>
                    </div>
                  )}
                </motion.div>
              </>
            ) : null}
          </motion.div>
        </div>
      </div>
    </>
  );
};

export default OrderDetailPage;
